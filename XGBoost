#載入talib
!wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
!tar -xzvf ta-lib-0.4.0-src.tar.gz
%cd ta-lib
!./configure --prefix=/usr
!make
!make install
!pip install Ta-Lib

# 匯入需要的套件
# 資料科學常用數據分析套件
import pandas as pd
import numpy as np
#from scipy.stats import skew
# 儲存模型
from pickle import dump
# 擷取yahoo finance資料套件
import yfinance as yf
#----------------------機器學習套件-------------------#
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import mean_squared_error as MSE
import xgboost
# 計算技術指標套件
import talib as ta
# 繪圖套件
import matplotlib.pyplot as plt
# %matplotlib inline
# 畫蠟燭圖套件
#import mplfinance as mpf
# 處理時間資料套件
from datetime import datetime

# 股票代號
stock_id = '2356'
# 要預測 NextPeriod日後的報酬
NextPeriod = 1
# 下載近五年日資料
data = yf.download(stock_id+'.tw',period='5y',interval='1d')

def genAdjPrice(data):
  # Input:
  #       Close:      收盤價
  #       Adj Close:  調整收盤價
  # 調整股價公式:
  # Adj_Close = Close * AdjF
  # 計算調整開盤價、調整最高價、調整最低價
  data['Adj Factor'] = data['Adj Close']/data['Close']
  data['Adj Open'] = data['Adj Factor']*data['Open']
  data['Adj High'] = data['Adj Factor']*data['High']
  data['Adj Low'] = data['Adj Factor']*data['Low']

  return data

# 增加調整股價
data = genAdjPrice(data)

data.info()

# 目標變數定義預測目標
# 目標變數: 下一個時期後的報酬率(%)
Target=pd.DataFrame([])
Target['NextProfit'] = (data['Adj Close'].shift(-NextPeriod)/data['Adj Close']-1)*100

# 檢查目標變數
pd.concat([Target,data['Adj Close']],axis=1).tail(10)

# 最後一筆資料，沒有隔天的資料，可以刪除
Target=Target.dropna()

Target.shape

def genTechIndicators(data):
  # 產生技術指標特徵
  # EMA
  period = [i for i in range(5,100,5)]
  for i in period:
    fname='EMA '+str(i)+'d'
    data[fname]=talib.EMA(data['Adj Close'], timeperiod=i)

  # William
  for i in period:
    fname='William '+str(i)+'d'
    data[fname]=talib.WILLR(data['Adj High'], data['Adj Low'], data['Adj Close'], timeperiod=i)

  # RSI
  for i in period:
    fname='RSI '+str(i)+'d'
    data[fname]=talib.RSI(data['Adj Close'], timeperiod=i)

  # OBV
  data['OBV']=talib.OBV(data['Adj Close'],data['Volume'])


  return data

# 增加 features
data=genTechIndicators(data)

data.head()

# 紀錄最大NaN個數
# 前maxNaN筆資料需要刪除
maxNaN = data.isna().sum().max()
print(maxNaN)

data.iloc[:-1,10:].tail()

data

def preprocess(data):
  # 選用模型訓練的特徵
  # Row:
  #   最後一天資料，沒有對應的target，所以刪除
  # Column:
  #   只使用技術指標的特徵
  #   刪除 Open, High, Low, Close, Volume
  data = data.iloc[:-1,4:]

  # 刪除 NaN值
  #   產生 NaN的原因:
  #   沒有足夠資料，計算技術指標
  #   如: 計算10日MA時，前9筆資料無法計算
  data=data.dropna()

  return data

#需要'Open', 'High', 'Low', 'Close'
data = preprocess(data)
data.columns = data.columns.str.replace("Adj Close", "Close")
data.columns = data.columns.str.replace("Adj Open", "Open")
data.columns = data.columns.str.replace("Adj High", "High")
data.columns = data.columns.str.replace("Adj Low", "Low")

data.isna().sum().max(

Target.describe()

# Target 需要drop前面沒有技術指標的資料
Target=Target[maxNaN:]

# 確認 data和 Target資料筆數一樣
print(data.shape,Target.shape)

# 分割訓練資料和測試資料
x_test=data.iloc[900:,:]
x_train=data.iloc[:900,:]
y_test=Target.iloc[900:]
y_train=Target.iloc[:900]

# 模型訓練
model = xgboost.XGBRegressor()
model.fit(x_train,y_train)
print(f'Training Error(RMSE): {np.sqrt(MSE(y_train, model.predict(x_train)))}')

# predict next day profit
#y_test['PredProfit'] = model.predict(x_test)
y_pred = model.predict(x_test)
print(f'Testing Error: {np.sqrt(MSE(y_test,y_pred))}')

train_pred = model.predict(x_train)
test_pred = model.predict(x_test)

x_train['pred'] = train_pred
x_test['pred'] = test_pred

x_train['origin'] = y_train
x_test['origin'] = y_test

x_train['pred_y'] = 0
x_train['origin_y'] = 0
x_test['origin_y'] = 0
x_test['pred_y'] = 0

x_test.loc[(x_test['pred'] >= 2), 'pred_y'] = 2
x_test.loc[(x_test['pred'] <= -2), 'pred_y'] = 1
x_test.loc[(x_test['origin'] >= 2), 'origin_y'] = 2

x_train.loc[(x_train['pred'] >= 2), 'pred_y'] = 2
x_train.loc[(x_train['pred'] <= -2), 'pred_y'] = 1
x_train.loc[(x_train['origin'] >= 2), 'origin_y'] = 1

!pip install backtesting

from backtesting import Backtest, Strategy
#隔天預設漲2%買與跌2%賣 停損如何做(假設沒遇到2%一直跌)
class SmaCross(Strategy): #交易策略命名為SmaClass，使用backtesting.py的Strategy功能
    def init(self):

        self.y=self.data.Y
        self.i=0

    def next(self):
        if self.y[self.i]==1:
            self.sell()
        elif self.y[self.i]==2:
            self.buy()
        self.i=self.i+1

index_name = ['起始時間', '結束時間', '經過天數', '投資時間比率', '最終資產',
       '最高資產', '報酬率[%]', '買入持有報酬率[%]',
       '報酬率(年)', '波動率(年)', '夏普比率',
       '索提諾比率', '卡爾瑪比率', '最大回落[%]',
       '平均回落[%]', '最長交易回落期間', '平均交易回落期間',
       '交易次數', '勝率[%]', '最好交易報酬率[%]', '最差交易報酬率[%]',
       '平均交易報酬率[%]', '最長交易間隔', '平均交易間隔',
       '利潤係數', '期望值[%]', '中號', '_strategy', '_equity_curve',
       '_trades']

# test 預測
x_test.columns = x_test.columns.str.replace("pred_y", "Y")
test = Backtest(x_test, SmaCross, cash=100000000, commission=.001,exclusive_orders=True)
x_test.columns = x_test.columns.str.replace("Y", "pred_y")
# 指定回測程式為test，在Backtest函數中依序放入(資料來源、策略、現金、手續費)
result = test.run()
#執行回測程式並存到result中
result.index=index_name
print(result) # 直接print文字結果
test.plot()
