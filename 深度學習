# 匯入需要的套件
# 資料科學常用數據分析套件
import pandas as pd
import numpy as np
#from scipy.stats import skew
# 儲存模型
from pickle import dump
# 擷取yahoo finance資料套件
import yfinance as yf
#----------------------機器學習套件-------------------#
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import TensorDataset, DataLoader
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
# 繪圖套件
import matplotlib.pyplot as plt
%matplotlib inline

#股票
stock_id = "2330"
# 設定交易區間
stock_data = stock_data.loc['2007-04-01':'2025-03-28']

# === 2. 計算技術指標（共18種） ===
def genTechIndicators(stock_data):
    indicators = pd.DataFrame(index=stock_data.index)
    indicators['TR'] = talib.TRANGE(stock_data['high'], stock_data['low'], stock_data['close'])
    indicators['ATR_20'] = talib.ATR(stock_data['high'], stock_data['low'], stock_data['close'], timeperiod=20)
    for i in [5, 10, 20]:
        indicators[f'SMA_{i}'] = talib.SMA(stock_data['close'], timeperiod=i)
        indicators[f'EMA_{i}'] = talib.EMA(stock_data['close'], timeperiod=i)
    K, D = talib.STOCH(stock_data['high'], stock_data['low'], stock_data['close'])
    indicators['K'] = K
    indicators['D'] = D
    indicators['RSI_14'] = talib.RSI(stock_data['close'], timeperiod=14)
    indicators['OBV'] = talib.OBV(stock_data['close'], stock_data['volume'])
    indicators['MACD'], _, _ = talib.MACD(stock_data['close'])
    indicators['PLUS_DI'] = talib.PLUS_DI(stock_data['high'], stock_data['low'], stock_data['close'], timeperiod=14)
    indicators['MINUS_DI'] = talib.MINUS_DI(stock_data['high'], stock_data['low'], stock_data['close'], timeperiod=14)
    indicators['ADX'] = talib.ADX(stock_data['high'], stock_data['low'], stock_data['close'], timeperiod=14)
    indicators['WILLR_14'] = talib.WILLR(stock_data['high'], stock_data['low'], stock_data['close'], timeperiod=14)
    return indicators
# 計算指標
indicators = genTechIndicators(stock_data)
stock_data = pd.concat([stock_data, indicators], axis=1)

# 目標進場訊號
stock_data['target'] = stock_data['close'].shift(-1) / stock_data['close'] - 1
stock_data.dropna(inplace=True)

# === 5. 特徵欄位標準化（排除 target & raw 欄位） ===
exclude_cols = ['target'] + [col for col in stock_data.columns if col.startswith('raw_')]
feature_cols = [col for col in stock_data.columns if col not in exclude_cols]
scaler = MinMaxScaler()
stock_data[feature_cols] = scaler.fit_transform(stock_data[feature_cols])
# === 7. 分割特徵與標籤 ===
X_all = stock_data[feature_cols].values
y_all = stock_data['target'].values

# === 8. 分割資料為 Training (70%) / Test (15%) / Validation (15%) ===
total_len = len(X_seq)
val_len = int(total_len * 0.15)
train_test_len = total_len - val_len
train_len = int(train_test_len * 0.75)
test_len = train_test_len - train_len

# === 7. 建立 LSTM 模型 ===
class LSTMRegressor(nn.Module):
    def __init__(self, input_dim, hidden_dim, num_layers, output_dim):
        super(LSTMRegressor, self).__init__()
        self.lstm = nn.LSTM(input_size=input_dim, hidden_size=hidden_dim,
                            num_layers=num_layers, batch_first=True)
        self.fc = nn.Linear(hidden_dim, output_dim)

    def forward(self, x):
        out, _ = self.lstm(x)
        out = self.fc(out[:, -1, :])
        return out
